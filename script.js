/**
 * Sodeep - C√¥ng c·ª• t·∫°o ra nh·ªØng c√¢u quote ƒë·∫∑c bi·ªát
 * S·ª≠ d·ª•ng d·ªãch v·ª• t·∫°o n·ªôi dung ƒë·ªÉ t·∫°o ra nh·ªØng c√¢u quote √Ω nghƒ©a
 */

class SodeepQuoteGenerator {
    constructor() {
        this.DEFAULT_API_KEY = "AIzaSyDSVRTEEx5oFNBTxvA44_E9NpgMFp0G7sU";
        this.apiEndpoint = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';
        this.accessCode = '';
        this.isGenerating = false;
        
        this.initializeElements();
        this.loadSavedSettings();
        this.attachEventListeners();
        this.checkFormValidity();
    }

    /**
     * Kh·ªüi t·∫°o c√°c ph·∫ßn t·ª≠ DOM
     */
    initializeElements() {
        this.elements = {
            userInput: document.getElementById('userInput'),
            accessCode: document.getElementById('accessCode'),
            generateBtn: document.getElementById('generateBtn'),
            outputSection: document.getElementById('outputSection'),
            quoteOutput: document.getElementById('quoteOutput'),
            copyBtn: document.getElementById('copyBtn'),
            shareBtn: document.getElementById('shareBtn'),
            regenerateBtn: document.getElementById('regenerateBtn'),
            saveAccessCode: document.getElementById('saveAccessCode'),
            toggleAccessCode: document.getElementById('toggleAccessCode'),
            toggleIcon: document.getElementById('toggleIcon'),
            charCount: document.getElementById('charCount'),
            toast: document.getElementById('toast'),
            toggleApiSection: document.getElementById('toggleApiSection'),
            apiSection: document.querySelector('.api-section')
        };
    }

    /**
     * T·∫£i c√†i ƒë·∫∑t ƒë√£ l∆∞u t·ª´ localStorage
     */
    loadSavedSettings() {
        const savedAccessCode = localStorage.getItem('sodeep_access_code');
        if (savedAccessCode) {
            this.accessCode = savedAccessCode;
            this.elements.accessCode.value = savedAccessCode;
        } else {
            // S·ª≠ d·ª•ng API key m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ saved key
            this.accessCode = this.DEFAULT_API_KEY;
        }

        const savedInput = localStorage.getItem('sodeep_last_input');
        if (savedInput) {
            this.elements.userInput.value = savedInput;
            this.updateCharCount();
        }
    }

    /**
     * G·∫Øn c√°c event listeners
     */
    attachEventListeners() {
        // Theo d√µi thay ƒë·ªïi trong form
        this.elements.userInput.addEventListener('input', () => {
            this.updateCharCount();
            this.checkFormValidity();
            this.saveInputToStorage();
        });

        this.elements.accessCode.addEventListener('input', () => {
            this.checkFormValidity();
        });

        // N√∫t t·∫°o quote
        this.elements.generateBtn.addEventListener('click', () => {
            this.generateQuote();
        });

        // C√°c n√∫t action
        this.elements.copyBtn.addEventListener('click', () => {
            this.copyToClipboard();
        });

        this.elements.regenerateBtn.addEventListener('click', () => {
            this.generateQuote();
        });

        // N√∫t chia s·∫ª
        this.elements.shareBtn.addEventListener('click', () => {
            this.shareQuote();
        });

        // L∆∞u v√† hi·ªÉn th·ªã m√£ truy c·∫≠p
        this.elements.saveAccessCode.addEventListener('click', () => {
            this.saveAccessCode();
        });

        this.elements.toggleAccessCode.addEventListener('click', () => {
            this.toggleAccessCodeVisibility();
        });

        // Toggle API section
        if (this.elements.toggleApiSection) {
            this.elements.toggleApiSection.addEventListener('click', () => {
                this.toggleApiSection();
            });
        }

        // X·ª≠ l√Ω ph√≠m t·∫Øt
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch (e.key) {
                    case 'Enter':
                        e.preventDefault();
                        if (!this.isGenerating) {
                            this.generateQuote();
                        }
                        break;
                    case 'c':
                        if (this.elements.outputSection.style.display !== 'none') {
                            e.preventDefault();
                            this.copyToClipboard();
                        }
                        break;
                }
            }
        });
    }

    /**
     * C·∫≠p nh·∫≠t s·ªë k√Ω t·ª± ƒë√£ nh·∫≠p
     */
    updateCharCount() {
        const count = this.elements.userInput.value.length;
        this.elements.charCount.textContent = count;
        
        if (count > 450) {
            this.elements.charCount.style.color = 'var(--warning)';
        } else if (count > 400) {
            this.elements.charCount.style.color = 'var(--text-muted)';
        } else {
            this.elements.charCount.style.color = 'var(--text-muted)';
        }
    }

    /**
     * Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa form
     */
    checkFormValidity() {
        const hasInput = this.elements.userInput.value.trim().length > 0;
        // Kh√¥ng y√™u c·∫ßu access code v√¨ ƒë√£ c√≥ default API key
        
        this.elements.generateBtn.disabled = !hasInput || this.isGenerating;
    }

    /**
     * L∆∞u input v√†o localStorage
     */
    saveInputToStorage() {
        localStorage.setItem('sodeep_last_input', this.elements.userInput.value);
    }

    /**
     * L∆∞u m√£ truy c·∫≠p
     */
    saveAccessCode() {
        const accessCode = this.elements.accessCode.value.trim();
        if (accessCode) {
            localStorage.setItem('sodeep_access_code', accessCode);
            this.accessCode = accessCode;
            this.showToast('ƒê√£ l∆∞u m√£ truy c·∫≠p th√†nh c√¥ng', 'success');
        } else {
            this.showToast('Vui l√≤ng nh·∫≠p m√£ truy c·∫≠p', 'error');
        }
    }

    /**
     * Chuy·ªÉn ƒë·ªïi hi·ªÉn th·ªã m√£ truy c·∫≠p
     */
    toggleAccessCodeVisibility() {
        const input = this.elements.accessCode;
        const icon = this.elements.toggleIcon;
        
        if (input.type === 'password') {
            input.type = 'text';
            icon.textContent = 'üôà';
        } else {
            input.type = 'password';
            icon.textContent = 'üëÅÔ∏è';
        }
    }

    /**
     * L·∫•y API key hi·ªán t·∫°i (t·ª´ input ho·∫∑c default)
     */
    getCurrentApiKey() {
        const inputApiKey = this.elements.accessCode.value.trim();
        return inputApiKey || this.DEFAULT_API_KEY;
    }

    /**
     * Toggle hi·ªÉn th·ªã API section
     */
    toggleApiSection() {
        if (!this.elements.apiSection) return;
        
        const isVisible = this.elements.apiSection.style.display !== 'none';
        this.elements.apiSection.style.display = isVisible ? 'none' : 'block';
        
        // C·∫≠p nh·∫≠t text c·ªßa button
        if (this.elements.toggleApiSection) {
            const buttonText = isVisible ? 
                '<span>üîß</span> S·ª≠ d·ª•ng API key t√πy ch·ªânh' : 
                '<span>üîß</span> ·∫®n API key t√πy ch·ªânh';
            this.elements.toggleApiSection.innerHTML = buttonText;
        }
    }
    /**
     * T·∫°o quote t·ª´ input c·ªßa ng∆∞·ªùi d√πng
     */
    async generateQuote() {
        if (this.isGenerating) return;

        const userInput = this.elements.userInput.value.trim();

        if (!userInput) {
            this.showToast('Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng c·ªßa b·∫°n', 'error');
            return;
        }

        this.setLoadingState(true);

        try {
            const apiKey = this.getCurrentApiKey();
            const quote = await this.callGenerativeService(userInput, apiKey);
            this.displayQuote(quote);
            this.showToast('ƒê√£ t·∫°o ra quote th√†nh c√¥ng!', 'success');
        } catch (error) {
            console.error('L·ªói khi t·∫°o quote:', error);
            this.handleGenerationError(error);
        } finally {
            this.setLoadingState(false);
        }
    }

    /**
     * G·ªçi d·ªãch v·ª• t·∫°o n·ªôi dung
     */
    async callGenerativeService(userInput, accessCode) {
        const prompt = this.createPrompt(userInput);
        
        const requestBody = {
            contents: [{
                parts: [{
                    text: prompt
                }]
            }],
            generationConfig: {
                temperature: 0.7,
                topK: 40,
                topP: 0.95,
                maxOutputTokens: 1024,
            },
            safetySettings: [
                {
                    category: "HARM_CATEGORY_HARASSMENT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    category: "HARM_CATEGORY_HATE_SPEECH",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
        };

        const response = await fetch(`${this.apiEndpoint}?key=${accessCode}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(this.getErrorMessage(response.status, errorData));
        }

        const data = await response.json();
        
        if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
            throw new Error('D·ªãch v·ª• kh√¥ng th·ªÉ t·∫°o ra n·ªôi dung ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ch·ªß ƒë·ªÅ kh√°c.');
        }

        return data.candidates[0].content.parts[0].text;
    }

    /**
     * T·∫°o prompt cho d·ªãch v·ª• t·∫°o n·ªôi dung
     */
    createPrompt(userInput) {
        return `H√£y t·∫°o ra m·ªôt c√¢u quote (danh ng√¥n) b·∫±ng ti·∫øng Vi·ªát s√¢u s·∫Øc v√† √Ω nghƒ©a d·ª±a tr√™n ch·ªß ƒë·ªÅ ho·∫∑c √Ω t∆∞·ªüng sau: "${userInput}"

Y√™u c·∫ßu:
- Quote ph·∫£i ng·∫Øn g·ªçn, s√∫c t√≠ch (t·ªëi ƒëa 2-3 c√¢u)
- S·ª≠ d·ª•ng ng√¥n ng·ªØ ƒë·∫πp, c√≥ chi·ªÅu s√¢u tri·∫øt h·ªçc
- Th·ªÉ hi·ªán ƒë∆∞·ª£c tinh th·∫ßn t√≠ch c·ª±c, ƒë·ªông vi√™n
- Ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát Nam
- Kh√¥ng s·ª≠ d·ª•ng t·ª´ ng·ªØ ti√™u c·ª±c hay g√¢y t·ªïn th∆∞∆°ng

H√£y ch·ªâ tr·∫£ v·ªÅ c√¢u quote, kh√¥ng c·∫ßn gi·∫£i th√≠ch th√™m.`;
    }

    /**
     * Hi·ªÉn th·ªã quote ƒë√£ t·∫°o
     */
    displayQuote(quote) {
        // L√†m s·∫°ch v√† format quote
        const formattedQuote = this.formatQuote(quote);
        
        this.elements.quoteOutput.innerHTML = `<p>${formattedQuote}</p>`;
        this.elements.outputSection.style.display = 'block';
        
        // Scroll ƒë·∫øn k·∫øt qu·∫£
        this.elements.outputSection.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
        });
    }

    /**
     * Format quote ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp
     */
    formatQuote(quote) {
        return quote
            .trim()
            .replace(/^["''""]|["''""]$/g, '') // Lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p ·ªü ƒë·∫ßu/cu·ªëi
            .replace(/\n+/g, '<br><br>') // Thay th·∫ø line breaks
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Format bold
            .replace(/\*(.*?)\*/g, '<em>$1</em>'); // Format italic
    }

    /**
     * Chia s·∫ª quote
     */
    async shareQuote() {
        try {
            const quoteText = this.elements.quoteOutput.textContent.trim();
            const shareText = `${quoteText}\n\n- T·∫°o b·ªüi Sodeep (Th√°i B√¨nh D∆∞∆°ng)`;

            if (navigator.share) {
                // S·ª≠ d·ª•ng Web Share API n·∫øu c√≥
                await navigator.share({
                    title: 'Quote t·ª´ Sodeep',
                    text: shareText,
                    url: window.location.href
                });
                this.showToast('ƒê√£ chia s·∫ª quote th√†nh c√¥ng!', 'success');
            } else {
                // Fallback: copy to clipboard
                await this.copyShareText(shareText);
            }
        } catch (error) {
            if (error.name !== 'AbortError') {
                console.error('L·ªói khi chia s·∫ª:', error);
                // Fallback: copy to clipboard
                const quoteText = this.elements.quoteOutput.textContent.trim();
                const shareText = `${quoteText}\n\n- T·∫°o b·ªüi Sodeep (Th√°i B√¨nh D∆∞∆°ng)`;
                await this.copyShareText(shareText);
            }
        }
    }

    /**
     * Sao ch√©p text ƒë·ªÉ chia s·∫ª
     */
    async copyShareText(text) {
        try {
            await navigator.clipboard.writeText(text);
            this.showToast('ƒê√£ sao ch√©p quote ƒë·ªÉ chia s·∫ª v√†o clipboard', 'success');
        } catch (error) {
            console.error('L·ªói khi sao ch√©p:', error);
            this.fallbackCopyShareText(text);
        }
    }

    /**
     * Ph∆∞∆°ng th·ª©c sao ch√©p d·ª± ph√≤ng cho chia s·∫ª
     */
    fallbackCopyShareText(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        
        try {
            document.execCommand('copy');
            this.showToast('ƒê√£ sao ch√©p quote ƒë·ªÉ chia s·∫ª v√†o clipboard', 'success');
        } catch (error) {
            this.showToast('Kh√¥ng th·ªÉ chia s·∫ª. Vui l√≤ng sao ch√©p th·ªß c√¥ng.', 'error');
        } finally {
            document.body.removeChild(textArea);
        }
    }
    async copyToClipboard() {
        try {
            const quoteText = this.elements.quoteOutput.textContent.trim();
            await navigator.clipboard.writeText(quoteText);
            this.showToast('ƒê√£ sao ch√©p quote v√†o clipboard', 'success');
        } catch (error) {
            console.error('L·ªói khi sao ch√©p:', error);
            this.fallbackCopyToClipboard();
        }
    }

    /**
     * Ph∆∞∆°ng th·ª©c sao ch√©p d·ª± ph√≤ng
     */
    fallbackCopyToClipboard() {
        const textArea = document.createElement('textarea');
        textArea.value = this.elements.quoteOutput.textContent.trim();
        document.body.appendChild(textArea);
        textArea.select();
        
        try {
            document.execCommand('copy');
            this.showToast('ƒê√£ sao ch√©p quote v√†o clipboard', 'success');
        } catch (error) {
            this.showToast('Kh√¥ng th·ªÉ sao ch√©p. Vui l√≤ng sao ch√©p th·ªß c√¥ng.', 'error');
        } finally {
            document.body.removeChild(textArea);
        }
    }

    /**
     * Thi·∫øt l·∫≠p tr·∫°ng th√°i loading
     */
    setLoadingState(isLoading) {
        this.isGenerating = isLoading;
        
        if (isLoading) {
            this.elements.generateBtn.classList.add('loading');
            this.elements.generateBtn.disabled = true;
        } else {
            this.elements.generateBtn.classList.remove('loading');
            this.checkFormValidity();
        }
    }

    /**
     * X·ª≠ l√Ω l·ªói khi t·∫°o quote
     */
    handleGenerationError(error) {
        let errorMessage = 'C√≥ l·ªói x·∫£y ra khi t·∫°o quote. Vui l√≤ng th·ª≠ l·∫°i.';
        
        if (error.message) {
            errorMessage = error.message;
        }
        
        this.showToast(errorMessage, 'error');
    }

    /**
     * L·∫•y th√¥ng b√°o l·ªói d·ª±a tr√™n status code
     */
    getErrorMessage(status, errorData) {
        switch (status) {
            case 400:
                return 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë·∫ßu v√†o.';
            case 401:
                return 'M√£ truy c·∫≠p d·ªãch v·ª• kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.';
            case 403:
                return 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªãch v·ª•. Vui l√≤ng ki·ªÉm tra m√£ truy c·∫≠p.';
            case 429:
                return 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.';
            case 500:
                return 'D·ªãch v·ª• t·∫°o n·ªôi dung t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
            default:
                return errorData.error?.message || 'C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª•. Vui l√≤ng th·ª≠ l·∫°i.';
        }
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng b√°o toast
     */
    showToast(message, type = 'info') {
        const toast = this.elements.toast;
        
        // X√≥a c√°c class c≈©
        toast.className = 'toast';
        
        // Th√™m class m·ªõi
        if (type) {
            toast.classList.add(type);
        }
        
        toast.textContent = message;
        toast.classList.add('show');
        
        // T·ª± ƒë·ªông ·∫©n sau 4 gi√¢y
        setTimeout(() => {
            toast.classList.remove('show');
        }, 4000);
    }
}

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi DOM ƒë√£ s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', () => {
    new SodeepQuoteGenerator();
});

// Service Worker registration (n·∫øu c√≥)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
            .then((registration) => {
                console.log('SW registered: ', registration);
            })
            .catch((registrationError) => {
                console.log('SW registration failed: ', registrationError);
            });
    });
}